# name: jira automation and discord integration 

# on:
#   workflow_dispatch:
    
# jobs:
#   provision:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: setup terraform
#         uses: hashicorp/setup-terraform@v1

#       - name: terraform init
#         run: terraform init
#         working-directory: ./terraform

#       - name: terraform apply
#         run: terraform apply -auto-approve
#         working-directory: ./terraform
#         env:
#           TF_VAR_jira_url: ${{ secrets.JIRA_URL }}
#           TF_VAR_jira_user: ${{ secrets.JIRA_USER }}
#           TF_VAR_jira_api_token: ${{ secrets.JIRA_API_TOKEN }}
#           TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

#       - name: update Jira
#         run: python scripts/update_jira.py
#         env:
#           JIRA_URL: ${{ secrets.JIRA_URL }}
#           JIRA_USER: ${{ secrets.JIRA_USER }}
#           JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
name: Terraform-Jira-Discord Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./terraform

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: ./terraform
      continue-on-error: true
      env:
        TF_VAR_jira_url: ${{ secrets.JIRA_URL }}
        TF_VAR_jira_user: ${{ secrets.JIRA_USER }}
        TF_VAR_jira_api_token: ${{ secrets.JIRA_API_TOKEN }}
        TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ./terraform
      env:
        TF_VAR_jira_url: ${{ secrets.JIRA_URL }}
        TF_VAR_jira_user: ${{ secrets.JIRA_USER }}
        TF_VAR_jira_api_token: ${{ secrets.JIRA_API_TOKEN }}
        TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}

    # - name: Verify Jira Rule and Webhook
    #   run: python scripts/verify_jira_rule.py
    #   env:
    #     JIRA_URL: ${{ secrets.JIRA_URL }}
    #     JIRA_USER: ${{ secrets.JIRA_USER }}
    #     JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
